---
- name: Clean all config folders
  file: path="{{ item }}" state=absent
  loop: "{{ fabric_artifacts_folders }}"

- name: Ensures all dir exists
  file: path="{{ item }}" state=directory
  loop: "{{ fabric_artifacts_folders }}"

- name: Generate CA configuration files from templates
  template: src="{{ item.from }}" dest="{{ item.to }}"
  loop: "{{ ca_templates }}"

- name: Stop oldest CA container
  docker_compose:
    project_src: "{{ docker_artifacts }}"
    files:
      - "docker-compose-ca-{{ org }}.yaml"
    remove_volumes: yes
    state: absent

- name: Start CA container
  docker_compose:
    project_src: "{{ docker_artifacts }}"
    files:
      - "docker-compose-ca-{{ org }}.yaml"
    restarted: yes

# TODO: it might be worth using a docker module
- name: Copy artifacts from CA
  shell: "docker cp ca.{{ org }}.{{ domain }}:/etc/hyperledger/fabric-ca-server {{ ca_dir }}"

- name: Generatins artifacts for peer nodes
  block:

    # Register identites:

    - name: Enroll the CA admin
      shell: "fabric-ca-client enroll -u https://admin:adminpw@localhost:7054 {{ with_tls_cert }}"

    - name: Register the org admin
      shell: "fabric-ca-client register --id.name {{ org }}admin --id.secret adminpw --id.type admin -u https://localhost:7054 {{ with_tls_cert }}"

    - name: Register peer0
      shell: "fabric-ca-client register --id.name peer0 --id.secret peerpw --id.type peer -u https://localhost:7054 {{ with_tls_cert }}"

    - name: Register orderer
      shell: "fabric-ca-client register --id.name orderer --id.secret ordererpw --id.type orderer -u https://localhost:7054 {{ with_tls_cert }}"

    - name: Register the orderer admin
      shell: "fabric-ca-client register --id.name ordererAdmin --id.secret ordereradminpw --id.type admin -u https://localhost:7054 {{ with_tls_cert }}"

    # Generate peer artifacts:

    - name: Enroll the org admin
      shell: "fabric-ca-client enroll -u https://{{ org }}admin:adminpw@localhost:7054 -M {{ admin_dir }}/msp {{ with_tls_cert }}"

    - name: Enroll the peer0
      shell: "fabric-ca-client enroll -u https://peer0:peerpw@localhost:7054 --csr.hosts peer0.{{ org }}.{{ domain }} -M {{ peer_dir }}/msp {{ with_tls_cert }}"

    - name: Enroll the peer0 TLS
      shell: "fabric-ca-client enroll -u https://peer0:peerpw@localhost:7054 --csr.hosts peer0.{{ org }}.{{ domain }} --enrollment.profile tls -M {{ peer_dir }}/tls {{ with_tls_cert }}"

    # Transfer peer artifacts to canonical Fabric paths

    - name: Transfer peer artifacts
      file: src="{{ item.from }}" dest="{{ item.to }}" state=touch
      loop: "{{ peer_crypto_transfers }}"

  environment:
    FABRIC_CA_CLIENT_HOME: "{{ registrar_peer }}"

  when: "'peer' in node_roles"

- name: Generatins artifacts for orderer nodes
  block:

    # Generate orderer artifacts:

    - name: Enroll the CA admin
      shell: " fabric-ca-client enroll -u https://admin:adminpw@localhost:7054 {{ with_tls_cert }}"

    - name: Enroll the orderer
      shell: "export FABRIC_CA_CLIENT_HOME={{ registrar_orderer }} && fabric-ca-client enroll -u https://orderer:ordererpw@localhost:7054 --csr.hosts orderer{{ orderer_id | default() }}.{{ domain }} -M {{ orderer_dir }}/msp {{ with_tls_cert }}"

    - name: Enroll the orderer TLS
      shell: "fabric-ca-client enroll -u https://orderer:ordererpw@localhost:7054 --csr.hosts orderer{{ orderer_id | default() }}.{{ domain }} -M {{ orderer_dir }}/tls --enrollment.profile tls {{ with_tls_cert }}"

    - name: Enroll the orderer admin
      shell: "fabric-ca-client enroll -u https://ordererAdmin:ordereradminpw@localhost:7054  -M {{ admin_orderer_dir }}/msp {{ with_tls_cert }}"

    # Transfer orderer artifacts to canonical Fabric paths

    - name: Transfer orderer artifacts
      file: src="{{ item.from }}" dest="{{ item.to }}" state=touch
      loop: "{{ orderer_crypto_transfers }}"

  environment:
    FABRIC_CA_CLIENT_HOME: "{{ registrar_orderer }}"

  when: "'orderer' in node_roles"



#          - name: Copy to admincerts
#            raw: "mkdir -p {{ orderer_org }}/msp/admincerts && cp {{ admin_orderer_dir }}/msp/signcerts/*.pem {{ orderer_org }}/msp/admincerts/"
#
#          - name: Prepare TLS folders (step 1)
#            raw: "cp {{ orderer_dir }}/tls/tlscacerts/*.pem {{ orderer_dir }}/tls/ca.crt &&
#                  cp {{ orderer_dir }}/tls/keystore/* {{ orderer_dir }}/tls/server.key &&
#                  cp {{ orderer_dir }}/tls/signcerts/*.pem {{ orderer_dir }}/tls/server.crt &&
#
#                  mkdir {{ orderer_org }}/tls &&
#
#                  cp {{ orderer_dir }}/tls/tlscacerts/*.pem {{ orderer_org }}/tls/ca.crt &&
#                  cp {{ orderer_dir }}/tls/keystore/* {{ orderer_org }}/tls/server.key &&
#                  cp {{ orderer_dir }}/tls/signcerts/*.pem {{ orderer_org }}/tls/server.crt"
#
#          - name: Prepare TLS folders (step 2)
#            raw: "mkdir {{ orderer_dir }}/msp/tlscacerts && cp {{ orderer_dir }}/tls/tlscacerts/* {{ orderer_dir }}/msp/tlscacerts/tlsca.{{ domain }}-cert.pem &&
#
#                  mkdir {{ orderer_org }}/msp/tlscacerts && cp {{ orderer_dir }}/tls/tlscacerts/* {{ orderer_org }}/msp/tlscacerts/tlsca.{{ domain }}-cert.pem &&
#
#                  mkdir {{ orderer_org }}/tlsca && cp {{ orderer_dir }}/tls/tlscacerts/* {{ orderer_org }}/tlsca/tlsca.{{ domain }}-cert.pem"

       # when: "'ca' in node_roles"

#  name: Copy to admincerts
#  shell: "mkdir -p {{ peer_org }}/users/Admin@{{ org }}.{{ domain }}/msp/admincerts && cp {{ admin_dir }}/msp/signcerts/*.pem {{ peer_org }}/users/Admin@{{ org }}.{{ domain }}/msp/admincerts"


#  name: Copy to users/Admin@<org>.<domain>/msp/admincerts
#  file: src="{{ admin_dir }}/msp/signcerts/*.pem" dest="{{ peer_org }}/users/Admin@{{ org }}.{{ domain }}/msp/admincerts"
#
#  name: Copy to admincerts
#  file: src="{{ admin_dir }}/msp/signcerts/*.pem" dest="{{ peer_org }}/msp/admincerts/"

            #raw: "mkdir -p {{ peer_org }}/msp/admincerts && cp {{ admin_dir }}/msp/signcerts/*.pem {{ peer_org }}/msp/admincerts/"

#          - name: Prepare TLS folders (step 1)
#            raw: "cp {{ peer_dir }}/tls/tlscacerts/*.pem {{ peer_dir }}/tls/ca.crt &&
#                  cp {{ peer_dir }}/tls/keystore/* {{ peer_dir }}/tls/server.key &&
#                  cp {{ peer_dir }}/tls/signcerts/*.pem {{ peer_dir }}/tls/server.crt &&
#                  mkdir {{ peer_org }}/tls &&
#                  cp {{ peer_dir }}/tls/tlscacerts/*.pem {{ peer_org }}/tls/ca.crt &&
#                  cp {{ peer_dir }}/tls/keystore/* {{ peer_org }}/tls/server.key &&
#                  cp {{ peer_dir }}/tls/signcerts/*.pem {{ peer_org }}/tls/server.crt"
#
#          - name: Prepare TLS folders (step 2)
#            raw: "mkdir {{ peer_org }}/msp/tlscacerts && cp {{ peer_dir }}/tls/tlscacerts/* {{ peer_org }}/msp/tlscacerts/ca.crt &&
#                  mkdir {{ peer_org }}/tlsca && cp {{ peer_dir }}/tls/tlscacerts/* {{ peer_org }}/tlsca/tlsca.{{ org }}.{{ domain }}-cert.pem &&
#                  mkdir {{ peer_org }}/ca && cp {{ peer_dir }}/msp/cacerts/* {{ peer_org }}/ca/ca.{{ org }}.{{ domain }}-cert.pem"

          # Generate orderer artifacts:






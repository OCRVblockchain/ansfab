---
- hosts: nodes
  connection: local
  tasks:

#    - name: Perfom check for 'newcomers' flag
#      fail:
#        msg: "newcomers flag is defined. Are you sure, you want to destroy existing network? ..Aborting."
#      tags:
#        - safetycheck
#      when: "newcomers is defined"
#
#    - name: Clean all previous dockers, if any
#      raw: "docker rm -f $(docker ps -a | grep {{ global_domain }} | awk '{print $1};')"
#      ignore_errors: true
#
#    - name: Clean all docker volumes
#      raw: "docker volume rm $(docker volume ls -qf dangling=true)"
#      ignore_errors: true
#
#    - name: Findout UID
#      raw: "id -u {{ ansible_user }}"
#      register: ansible_uid
#
#    - name: Findout GID
#      raw: "id -g {{ ansible_user }}"
#      register: ansible_gid

    - name: Clean all help-scripts, if any
      file:
        dest: "{{ item }}"
        state: absent
      loop:
        - "{{ fabric_starter_workdir }}/start-node.sh"
        - "{{ fabric_starter_workdir }}/stop-node.sh"

#    - set_fact:
#        ansible_user_uid: "{{ ansible_uid.stdout | int }}"
#        ansible_user_gid: "{{ ansible_gid.stdout | int }}"
    -
    - name: Changing ownership of project
      raw: "sudo chown -R deniskozlov {{ fabric_starter_workdir }}"

    - name: Starting orderer
      block:

        - name: Start orderer
          raw: "docker-compose -f {{ docker_artifacts }}/docker-compose-orderer-{{ org }}.yaml up -d 2>&1"

      when: "'ca' in node_roles"

    - name: Starting peers
      block:
#
#        - name: Create all folders for rsync..
#          file:
#            path: "{{ fabric_artifacts }}/{{ item.to }}"
#            state: directory
#          loop: "{{ files_to_rsync_nodes_phase1 }}"
#          when: "orderer_count is not defined or orderer_count <= 1"
#
#        - name: Synchronize genrated block files (artifacts)
#          synchronize: src="./artifacts/{{ item.from }}" dest="{{ fabric_artifacts }}/{{ item.to }}" recursive=yes
#          loop: "{{ files_to_rsync_nodes_phase1 }}"
#          when: "orderer_count is not defined or orderer_count <= 1"
#
#        - name: Synchronize www-client folder
#          synchronize: src="www-client" dest="{{ fabric_starter_workdir }}" recursive=yes
#
#        #      - name: Synchronize middleware folder
#        #        synchronize: src="middleware" dest="{{ fabric_starter_workdir }}" recursive=yes
#
        - name: Start docker containers
          raw: "docker-compose -f {{ docker_artifacts }}/docker-compose-peer-{{ org }}.yaml up -d 2>&1"
#
        - name: Create channels
          include_tasks: create-channels.yaml
         # loop: "{{ global_channels }}"

        - name: Install chaincode
          include_tasks: install-chaincode.yaml
          loop: "{{ global_channels }}"
#
      when: "'ca' in node_roles"
#
#    - name: Creating channels
#      block:
#
#        - name: Creating channels
#          raw: "docker exec cli.{{ org }}.{{ global_domain }} bash -c 'peer channel create \
#        -o orderer{{ orderer_id | default() }}.{{ global_domain }}:7050 \
#        -c {{ item.name }} \
#        -f /etc/hyperledger/artifacts/channel/{{ item.name }}.tx \
#        --tls --cafile /etc/hyperledger/artifacts/crypto-config/ordererOrganizations/{{ global_domain }}/tlsca/tlsca.{{ global_domain }}-cert.pem'"
#          loop: "{{ global_channels }}"
#          when: "org in item.particapants[0]"
#
#        - name: Changing ownership of channel block files
#          raw: 'docker exec "cli.{{ org }}.{{ global_domain }}" bash -c "chown -R {{ ansible_user_uid }}:{{ ansible_user_gid }} ."'
#
#        - name: Synchronize genrated block files (artifacts)
#          synchronize: src="{{ fabric_artifacts }}/{{ item.name }}.block" dest="./artifacts/" mode=pull recursive=yes
#          loop: "{{ global_channels }}"
#          when: "org in item.particapants[0]"
#
#        - name: Synchronize generated block files (artifacts) back
#          # become: true
#          synchronize: src="artifacts/{{ item.name }}.block" dest="{{ fabric_artifacts }}/" recursive=yes
#          loop: "{{ global_channels }}"
#          when: "org in item.particapants"
#
#        - name: Joining other channels
#          raw: 'docker exec "cli.{{ org }}.{{ global_domain }}" bash -c "export CORE_PEER_ADDRESS=peer0.{{ org }}.{{ global_domain }}:7051 && peer channel join -b {{ item.name }}.block"'
#          loop: "{{ global_channels }}"
#          when: "org in item.particapants"
#
#        - name: Instantiating chaincode with ensorsement policy
#          raw: "docker exec cli.{{ org }}.{{ global_domain }} bash -c \
#        'export CORE_PEER_ADDRESS=peer0.{{ org }}.{{ global_domain }}:7051 && \
#        peer chaincode instantiate -n {{ item.chaincode.name }} \
#        -P \"{{ item.chaincode.policy }}\" \
#        -v {{ item.chaincode.version }} \
#        -c {{ item.chaincode.init | to_json }} \
#        -o orderer{{ orderer_id | default() }}.{{ global_domain }}:7050 -C {{ item.name }} --tls \
#        --cafile /etc/hyperledger/artifacts/crypto-config/ordererOrganizations/{{ global_domain }}/tlsca/tlsca.{{ global_domain }}-cert.pem \
#        {{ collections_config_param }} {{ collections_config_path }}'"
#          loop: "{{ global_channels }}"
#          when: "org in item.particapants[0] and item.chaincode.policy != ''"
#
#        - name: Instantiating chaincode
#          raw: "docker exec cli.{{ org }}.{{ global_domain }} bash -c \
#        'export CORE_PEER_ADDRESS=peer0.{{ org }}.{{ global_domain }}:7051 && \
#        peer chaincode instantiate -n {{ item.chaincode.name }} \
#        -v {{ item.chaincode.version }} \
#        -c {{ item.chaincode.init | to_json }} \
#        -o orderer{{ orderer_id | default() }}.{{ global_domain }}:7050 -C {{ item.name }} --tls \
#        --cafile /etc/hyperledger/artifacts/crypto-config/ordererOrganizations/{{ global_domain }}/tlsca/tlsca.{{ global_domain }}-cert.pem \
#        {{ collections_config_param }} {{ collections_config_path }}'"
#          loop: "{{ global_channels }}"
#          when: "org in item.particapants[0] and item.chaincode.policy == ''"
#
#        - name: Changing ownership of channel block files
#          raw: 'docker exec "cli.{{ org }}.{{ global_domain }}" bash -c "chown -R {{ ansible_user_uid }}:{{ ansible_user_gid }} ."'
#
#        - name: Updating anchor peers
#          raw: 'docker exec "cli.{{ org }}.{{ global_domain }}" bash -c "peer channel update -o orderer{{ orderer_id | default() }}.{{ global_domain }}:7050 -c {{ item.name }} -f /etc/hyperledger/artifacts/channel/{{ org }}MSPanchors-{{ item.name }}.tx --tls --cafile /etc/hyperledger/artifacts/crypto-config/ordererOrganizations/{{ global_domain }}/tlsca/tlsca.{{ global_domain }}-cert.pem"'
#          loop: "{{ global_channels }}"
#          when: "org in item.particapants"
#
#      when: "global_channels is defined and 'peer' in node_roles"
